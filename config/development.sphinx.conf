indexer
{
}

searchd
{
  listen = 127.0.0.1:9312
  log = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/log/searchd.log
  query_log = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/log/searchd.query.log
  pid_file = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/log/searchd.development.pid
}

source filters_collections_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = sector1
  sql_pass = sector1
  sql_db = crawlfishdevdb
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `filters_collections`.`filters_collection_id` * CAST(2 AS SIGNED) + 0 AS `filters_collection_id` , `filters_collections`.`filter_key` AS `filter_key`, `filters_collections`.`filters_collection_id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 1824958369 AS `class_crc`, IFNULL('FiltersCollections', '') AS `sphinx_internal_class`, `filters_collections`.`filter_id` AS `filter_id`, `filters_collections`.`sub_category_id` AS `sub_category_id`, f_remove_stopwords(filter_key) AS `word_count` FROM `filters_collections`  WHERE (`filters_collections`.`filters_collection_id` >= $start AND `filters_collections`.`filters_collection_id` <= $end) GROUP BY `filters_collections`.`filters_collection_id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`filters_collection_id`), 1), IFNULL(MAX(`filters_collection_id`), 1) FROM `filters_collections` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_attr_uint = filter_id
  sql_attr_uint = sub_category_id
  sql_attr_uint = word_count
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT * FROM `filters_collections` WHERE `filters_collection_id` = (($id - 0) / 2)
}

index filters_collections_core
{
  source = filters_collections_core_0
  path = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/db/sphinx/development/filters_collections_core
  morphology = stem_en
  stopwords = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/db/sphinx/data/stopwords.txt
  charset_type = utf-8
}

index filters_collections
{
  type = distributed
  local = filters_collections_core
}

source products_filter_collections_core_0
{
  type = mysql
  sql_host = localhost
  sql_user = sector1
  sql_pass = sector1
  sql_db = crawlfishdevdb
  sql_sock = /var/run/mysqld/mysqld.sock
  sql_query_pre = SET NAMES utf8
  sql_query_pre = SET TIME_ZONE = '+0:00'
  sql_query = SELECT SQL_NO_CACHE `products_filter_collections`.`filters_collection_id` * CAST(2 AS SIGNED) + 1 AS `filters_collection_id` , `products_filter_collections`.`filter_key` AS `filter_key`, `products_filter_collections`.`filters_collection_id` AS `sphinx_internal_id`, 0 AS `sphinx_deleted`, 2200458759 AS `class_crc`, IFNULL('ProductsFilterCollections', '') AS `sphinx_internal_class`, `products_filter_collections`.`sub_category_id` AS `sub_category_id`, f_remove_stopwords(filter_key) AS `word_count` FROM `products_filter_collections`  WHERE (`products_filter_collections`.`filters_collection_id` >= $start AND `products_filter_collections`.`filters_collection_id` <= $end) GROUP BY `products_filter_collections`.`filters_collection_id` ORDER BY NULL
  sql_query_range = SELECT IFNULL(MIN(`filters_collection_id`), 1), IFNULL(MAX(`filters_collection_id`), 1) FROM `products_filter_collections` 
  sql_attr_uint = sphinx_internal_id
  sql_attr_uint = sphinx_deleted
  sql_attr_uint = class_crc
  sql_attr_uint = sub_category_id
  sql_attr_uint = word_count
  sql_attr_string = sphinx_internal_class
  sql_query_info = SELECT * FROM `products_filter_collections` WHERE `filters_collection_id` = (($id - 1) / 2)
}

index products_filter_collections_core
{
  source = products_filter_collections_core_0
  path = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/db/sphinx/development/products_filter_collections_core
  morphology = stem_en
  stopwords = /home/vijayaragavanv/rubyonrails/CrawlFish_Jun1/CrawlFish/db/sphinx/data/stopwords.txt
  charset_type = utf-8
}

index products_filter_collections
{
  type = distributed
  local = products_filter_collections_core
}
